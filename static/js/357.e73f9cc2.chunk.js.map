{"version":3,"file":"static/js/357.e73f9cc2.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","redux/tasks/selectors.js","redux/filter/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types';\nimport './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const loginInputName = nanoid();\n  const loginInputPhone = nanoid();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const contact = {\n      name: name,\n      number: number,\n    };\n\n    // const isSet = data.find(\n    //   item => item.name.toLowerCase() === name.toLowerCase()\n    // );\n\n    dispatch(addTask(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={loginInputName}> Name</label>\n      <input\n        id={loginInputName}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n      <label htmlFor={loginInputPhone}> Number </label>\n      <input\n        id={loginInputPhone}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","export const getFilter = state => state.filter.filter;\n","import './ContactList.module.css';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectAllTasks, selectLoading } from 'redux/tasks/selectors';\nimport { deleteTask } from 'redux/tasks/operations';\nimport { getFilter } from 'redux/filter/selectors';\n\nexport const ContactList = () => {\n  const isLoading = useSelector(selectLoading);\n\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllTasks);\n  const visibleContact = contacts.filter(item =>\n    item.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ul>\n      {visibleContact.map(({ id, name, number }) => (\n        <li key={id}>\n          <span>{name}:</span>\n          <span> {number}</span>\n          <button onClick={() => dispatch(deleteTask(id))}>\n            {isLoading ? 'Deleting...' : 'Delete'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport './Filter.module.css';\nimport { useState } from 'react';\n// import { setFilter } from 'redux/filterSlice';\n// import { getFilter } from 'redux/selectors';\n// import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const [filterStr, setFilterStr] = useState('');\n\n  //const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    setFilterStr(e.currentTarget.value);\n  };\n\n  dispatch(setFilter(filterStr));\n\n  const inputFilter = nanoid();\n  return (\n    <div>\n      <label htmlFor={inputFilter}> Find contacts by Name</label>\n      <input\n        id={inputFilter}\n        type=\"text\"\n        name=\"filter\"\n        value={filterStr}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <br></br>\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","loginInputName","loginInputPhone","handleChange","event","currentTarget","value","handleSubmit","e","preventDefault","contact","addTask","reset","onSubmit","htmlFor","type","pattern","title","required","onChange","selectLoading","state","tasks","loading","selectAllTasks","items","getFilter","filter","ContactList","isLoading","useSelector","visibleContact","item","toLowerCase","includes","map","onClick","deleteTask","Filter","filterStr","setFilterStr","setFilter","inputFilter","Contacts","useEffect","fetchTasks","Helmet"],"sourceRoot":""}